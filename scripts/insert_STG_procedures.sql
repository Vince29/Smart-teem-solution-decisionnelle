USE DATABASE STG;

USE SCHEMA public;

CREATE OR REPLACE PROCEDURE INSERT_CHAMBRE(
  NO_CHAMBRE_ARRAY ARRAY,
  NOM_CHAMBRE_ARRAY ARRAY,
  NO_ETAGE_ARRAY ARRAY,
  NOM_BATIMENT_ARRAY ARRAY,
  TYPE_CHAMBRE_ARRAY ARRAY,
  PRIX_JOUR_ARRAY ARRAY,
  DT_CREATION_ARRAY ARRAY
)
RETURNS STRING
LANGUAGE SQL
AS
$$
DECLARE
  i INTEGER DEFAULT 0;
  rows_count INTEGER;
BEGIN
  rows_count := ARRAY_SIZE(:NO_CHAMBRE_ARRAY);
  
  INSERT INTO CHAMBRE
  SELECT 
    :NO_CHAMBRE_ARRAY[f.seq]::INTEGER,
    :NOM_CHAMBRE_ARRAY[f.seq]::VARCHAR,
    :NO_ETAGE_ARRAY[f.seq]::BYTEINT,
    :NOM_BATIMENT_ARRAY[f.seq]::VARCHAR,
    :TYPE_CHAMBRE_ARRAY[f.seq]::VARCHAR,
    :PRIX_JOUR_ARRAY[f.seq]::SMALLINT,
    :DT_CREATION_ARRAY[f.seq]::DATE
  FROM TABLE(FLATTEN(:NO_CHAMBRE_ARRAY)) f(seq, key, value)
  WHERE f.seq < :rows_count;
  
  RETURN :rows_count || ' CHAMBRE(S) insérée(s)';
END;
$$;

CREATE OR REPLACE PROCEDURE INSERT_TRAITEMENT(
  ID_TRAITEMENT_ARRAY ARRAY,
  CD_MEDICAMENT_ARRAY ARRAY,
  CATG_MEDICAMENT_ARRAY ARRAY,
  MARQUE_FABRI_ARRAY ARRAY,
  QTE_MEDICAMENT_ARRAY ARRAY,
  DSC_POSOLOGIE_ARRAY ARRAY,
  ID_CONSULT_ARRAY ARRAY,
  TS_CREATION_TRAITEMENT_ARRAY ARRAY
)
RETURNS STRING
LANGUAGE SQL
AS
$$
DECLARE
  rows_count INTEGER;
BEGIN
  rows_count := ARRAY_SIZE(:ID_TRAITEMENT_ARRAY);
  
  INSERT INTO TRAITEMENT
  SELECT 
    :ID_TRAITEMENT_ARRAY[f.seq]::INTEGER,
    :CD_MEDICAMENT_ARRAY[f.seq]::INTEGER,
    :CATG_MEDICAMENT_ARRAY[f.seq]::VARCHAR,    :MARQUE_FABRI_ARRAY[f.seq]::VARCHAR,
    :QTE_MEDICAMENT_ARRAY[f.seq]::SMALLINT,
    :DSC_POSOLOGIE_ARRAY[f.seq]::VARCHAR,
    :ID_CONSULT_ARRAY[f.seq]::INTEGER,    
    CASE 
      WHEN :TS_CREATION_TRAITEMENT_ARRAY[f.seq] IS NULL OR :TS_CREATION_TRAITEMENT_ARRAY[f.seq] = '' THEN NULL
      ELSE TO_TIMESTAMP(REPLACE(:TS_CREATION_TRAITEMENT_ARRAY[f.seq]::VARCHAR, '#', '0'), 'YYYY-MM-DD-HH24-MI-SS')
    END
  FROM TABLE(FLATTEN(:ID_TRAITEMENT_ARRAY)) f(seq, key, value)
  WHERE f.seq < :rows_count;
  
  RETURN :rows_count || ' TRAITEMENT(S) inséré(s)';
END;
$$;

CREATE OR REPLACE PROCEDURE INSERT_PERSONNEL(
  ID_PERSONNEL_ARRAY ARRAY,
  NOM_PERSONNEL_ARRAY ARRAY,
  PRENOM_PERSONNEL_ARRAY ARRAY,
  FONCTION_PERSONNEL_ARRAY ARRAY,
  TS_DEBUT_ACTIVITE_ARRAY ARRAY,
  TS_FIN_ACTIVITE_ARRAY ARRAY,
  RAISON_FIN_ACTIVITE_ARRAY ARRAY,
  TS_CREATION_PERSONNEL_ARRAY ARRAY,
  TS_MAJ_PERSONNEL_ARRAY ARRAY,
  CD_STATUT_PERSONNEL_ARRAY ARRAY
)
RETURNS STRING
LANGUAGE SQL
AS
$$
DECLARE
  rows_count INTEGER;
BEGIN
  rows_count := ARRAY_SIZE(:ID_PERSONNEL_ARRAY);
  
  INSERT INTO PERSONNEL
  SELECT    :ID_PERSONNEL_ARRAY[f.seq]::INTEGER,
    :NOM_PERSONNEL_ARRAY[f.seq]::VARCHAR,
    :PRENOM_PERSONNEL_ARRAY[f.seq]::VARCHAR,
    :FONCTION_PERSONNEL_ARRAY[f.seq]::VARCHAR,    
    CASE 
      WHEN :TS_DEBUT_ACTIVITE_ARRAY[f.seq] IS NULL OR :TS_DEBUT_ACTIVITE_ARRAY[f.seq] = '' THEN NULL
      ELSE TO_TIMESTAMP(REPLACE(:TS_DEBUT_ACTIVITE_ARRAY[f.seq]::VARCHAR, '#', '0'), 'YYYY-MM-DD-HH24-MI-SS')
    END,
    CASE 
      WHEN :TS_FIN_ACTIVITE_ARRAY[f.seq] IS NULL OR :TS_FIN_ACTIVITE_ARRAY[f.seq] = '' THEN NULL
      ELSE TO_TIMESTAMP(REPLACE(:TS_FIN_ACTIVITE_ARRAY[f.seq]::VARCHAR, '#', '0'), 'YYYY-MM-DD-HH24-MI-SS')
    END,
    :RAISON_FIN_ACTIVITE_ARRAY[f.seq]::VARCHAR,
    CASE 
      WHEN :TS_CREATION_PERSONNEL_ARRAY[f.seq] IS NULL OR :TS_CREATION_PERSONNEL_ARRAY[f.seq] = '' THEN NULL
      ELSE TO_TIMESTAMP(REPLACE(:TS_CREATION_PERSONNEL_ARRAY[f.seq]::VARCHAR, '#', '0'), 'YYYY-MM-DD-HH24-MI-SS')
    END,
    CASE 
      WHEN :TS_MAJ_PERSONNEL_ARRAY[f.seq] IS NULL OR :TS_MAJ_PERSONNEL_ARRAY[f.seq] = '' THEN NULL
      ELSE TO_TIMESTAMP(REPLACE(:TS_MAJ_PERSONNEL_ARRAY[f.seq]::VARCHAR, '#', '0'), 'YYYY-MM-DD-HH24-MI-SS')
    END,
    :CD_STATUT_PERSONNEL_ARRAY[f.seq]::VARCHAR
  FROM TABLE(FLATTEN(:ID_PERSONNEL_ARRAY)) f(seq, key, value)
  WHERE f.seq < :rows_count;
  
  RETURN :rows_count || ' PERSONNEL(S) inséré(s)';
END;
$$;

CREATE OR REPLACE PROCEDURE INSERT_PATIENT(
  ID_PATIENT_ARRAY ARRAY,
  NOM_PATIENT_ARRAY ARRAY,
  PRENOM_PATIENT_ARRAY ARRAY,
  DT_NAISS_ARRAY ARRAY,
  VILLE_NAISS_ARRAY ARRAY,
  PAYS_NAISS_ARRAY ARRAY,
  NUM_SECU_ARRAY ARRAY,
  IND_PAYS_NUM_TELP_ARRAY ARRAY,
  NUM_TELEPHONE_ARRAY ARRAY,
  NUM_VOIE_ARRAY ARRAY,
  DSC_VOIE_ARRAY ARRAY,
  CMPL_VOIE_ARRAY ARRAY,
  CD_POSTAL_ARRAY ARRAY,
  VILLE_ARRAY ARRAY,
  PAYS_ARRAY ARRAY,
  TS_CREATION_PATIENT_ARRAY ARRAY,
  TS_MAJ_PATIENT_ARRAY ARRAY
)
RETURNS STRING
LANGUAGE SQL
AS
$$
DECLARE
  rows_count INTEGER;
BEGIN
  rows_count := ARRAY_SIZE(:ID_PATIENT_ARRAY);
  
  INSERT INTO PATIENT
  SELECT 
    :ID_PATIENT_ARRAY[f.seq]::INTEGER,
    :NOM_PATIENT_ARRAY[f.seq]::VARCHAR,
    :PRENOM_PATIENT_ARRAY[f.seq]::VARCHAR,
    :DT_NAISS_ARRAY[f.seq]::DATE,
    :VILLE_NAISS_ARRAY[f.seq]::VARCHAR,
    :PAYS_NAISS_ARRAY[f.seq]::VARCHAR,
    :NUM_SECU_ARRAY[f.seq]::VARCHAR,
    :IND_PAYS_NUM_TELP_ARRAY[f.seq]::VARCHAR,
    :NUM_TELEPHONE_ARRAY[f.seq]::VARCHAR,
    :NUM_VOIE_ARRAY[f.seq]::VARCHAR,
    :DSC_VOIE_ARRAY[f.seq]::VARCHAR,
    :CMPL_VOIE_ARRAY[f.seq]::VARCHAR,
    :CD_POSTAL_ARRAY[f.seq]::VARCHAR,    
    :VILLE_ARRAY[f.seq]::VARCHAR,    
    :PAYS_ARRAY[f.seq]::VARCHAR,    
    CASE 
      WHEN :TS_CREATION_PATIENT_ARRAY[f.seq] IS NULL OR :TS_CREATION_PATIENT_ARRAY[f.seq] = '' THEN NULL
      ELSE TO_TIMESTAMP(REPLACE(:TS_CREATION_PATIENT_ARRAY[f.seq]::VARCHAR, '#', '0'), 'YYYY-MM-DD-HH24-MI-SS')
    END,
    CASE 
      WHEN :TS_MAJ_PATIENT_ARRAY[f.seq] IS NULL OR :TS_MAJ_PATIENT_ARRAY[f.seq] = '' THEN NULL
      ELSE TO_TIMESTAMP(REPLACE(:TS_MAJ_PATIENT_ARRAY[f.seq]::VARCHAR, '#', '0'), 'YYYY-MM-DD-HH24-MI-SS')
    END
  FROM TABLE(FLATTEN(:ID_PATIENT_ARRAY)) f(seq, key, value)
  WHERE f.seq < :rows_count;
  
  RETURN :rows_count || ' PATIENT(S) inséré(s)';
END;
$$;

CREATE OR REPLACE PROCEDURE INSERT_CONSULTATION(
  ID_CONSULT_ARRAY ARRAY,
  ID_PERSONNEL_ARRAY ARRAY,
  ID_PATIENT_ARRAY ARRAY,
  TS_DEBUT_CONSULT_ARRAY ARRAY,
  TS_FIN_CONSULT_ARRAY ARRAY,
  POIDS_PATIENT_ARRAY ARRAY,
  TEMP_PATIENT_ARRAY ARRAY,
  UNIT_TEMP_ARRAY ARRAY,
  TENSION_PATIENT_ARRAY ARRAY,
  DSC_PATHO_ARRAY ARRAY,
  INDIC_DIABETE_ARRAY ARRAY,
  ID_TRAITEMENT_ARRAY ARRAY,
  INDIC_HOSPI_ARRAY ARRAY
)
RETURNS STRING
LANGUAGE SQL
AS
$$
DECLARE
  rows_count INTEGER;
BEGIN
  rows_count := ARRAY_SIZE(:ID_CONSULT_ARRAY);
    INSERT INTO CONSULTATION
  SELECT 
    :ID_CONSULT_ARRAY[f.seq]::INTEGER,
    :ID_PERSONNEL_ARRAY[f.seq]::INTEGER,    
    :ID_PATIENT_ARRAY[f.seq]::INTEGER,    
    CASE 
      WHEN :TS_DEBUT_CONSULT_ARRAY[f.seq] IS NULL OR :TS_DEBUT_CONSULT_ARRAY[f.seq] = '' THEN NULL
      ELSE TO_TIMESTAMP(REPLACE(:TS_DEBUT_CONSULT_ARRAY[f.seq]::VARCHAR, '#', '0'), 'YYYY-MM-DD-HH24-MI-SS')
    END,
    CASE 
      WHEN :TS_FIN_CONSULT_ARRAY[f.seq] IS NULL OR :TS_FIN_CONSULT_ARRAY[f.seq] = '' THEN NULL
      ELSE TO_TIMESTAMP(REPLACE(:TS_FIN_CONSULT_ARRAY[f.seq]::VARCHAR, '#', '0'), 'YYYY-MM-DD-HH24-MI-SS')
    END,
    :POIDS_PATIENT_ARRAY[f.seq]::INTEGER,
    :TEMP_PATIENT_ARRAY[f.seq]::INTEGER,
    :UNIT_TEMP_ARRAY[f.seq]::VARCHAR,
    :TENSION_PATIENT_ARRAY[f.seq]::INTEGER,
    :DSC_PATHO_ARRAY[f.seq]::VARCHAR,
    :INDIC_DIABETE_ARRAY[f.seq]::VARCHAR,
    :ID_TRAITEMENT_ARRAY[f.seq]::INTEGER,
    :INDIC_HOSPI_ARRAY[f.seq]::VARCHAR
  FROM TABLE(FLATTEN(:ID_CONSULT_ARRAY)) f(seq, key, value)
  WHERE f.seq < :rows_count;
  
  RETURN :rows_count || ' CONSULTATION(S) insérée(s)';
END;
$$;

CREATE OR REPLACE PROCEDURE INSERT_HOSPITALISATION(
  ID_HOSPI_ARRAY ARRAY,
  ID_CONSULT_ARRAY ARRAY,
  NO_CHAMBRE_ARRAY ARRAY,
  TS_DEBUT_HOSPI_ARRAY ARRAY,
  TS_FIN_HOSPI_ARRAY ARRAY,
  COUT_HOSPI_ARRAY ARRAY,
  ID_PERSONNEL_RESP_ARRAY ARRAY
)
RETURNS STRING
LANGUAGE SQL
AS
$$
DECLARE
  rows_count INTEGER;
BEGIN
  rows_count := ARRAY_SIZE(:ID_HOSPI_ARRAY);
    INSERT INTO HOSPITALISATION
  SELECT 
    :ID_HOSPI_ARRAY[f.seq]::INTEGER,
    :ID_CONSULT_ARRAY[f.seq]::INTEGER,
    :NO_CHAMBRE_ARRAY[f.seq]::SMALLINT,    
    CASE 
      WHEN :TS_DEBUT_HOSPI_ARRAY[f.seq] IS NULL OR :TS_DEBUT_HOSPI_ARRAY[f.seq] = '' THEN NULL
      ELSE TO_TIMESTAMP(REPLACE(:TS_DEBUT_HOSPI_ARRAY[f.seq]::VARCHAR, '#', '0'), 'YYYY-MM-DD-HH24-MI-SS')
    END,
    CASE 
      WHEN :TS_FIN_HOSPI_ARRAY[f.seq] IS NULL OR :TS_FIN_HOSPI_ARRAY[f.seq] = '' THEN NULL
      ELSE TO_TIMESTAMP(REPLACE(:TS_FIN_HOSPI_ARRAY[f.seq]::VARCHAR, '#', '0'), 'YYYY-MM-DD-HH24-MI-SS')
    END,
    :COUT_HOSPI_ARRAY[f.seq]::FLOAT,
    :ID_PERSONNEL_RESP_ARRAY[f.seq]::INTEGER
  FROM TABLE(FLATTEN(:ID_HOSPI_ARRAY)) f(seq, key, value)
  WHERE f.seq < :rows_count;
  
  RETURN :rows_count || ' HOSPITALISATION(S) insérée(s)';
END;
$$;

CREATE OR REPLACE PROCEDURE INSERT_MEDICAMENT(
  CD_MEDICAMENT_ARRAY ARRAY,
  NOM_MEDICAMENT_ARRAY ARRAY,
  CONDIT_MEDICAMENT_ARRAY ARRAY,
  CATG_MEDICAMENT_ARRAY ARRAY,
  MARQUE_FABRI_ARRAY ARRAY
)
RETURNS STRING
LANGUAGE SQL
AS
$$
DECLARE
  rows_count INTEGER;
BEGIN
  rows_count := ARRAY_SIZE(:CD_MEDICAMENT_ARRAY);
  
  INSERT INTO MEDICAMENT
  SELECT 
    :CD_MEDICAMENT_ARRAY[f.seq]::VARCHAR,
    :NOM_MEDICAMENT_ARRAY[f.seq]::VARCHAR,
    :CONDIT_MEDICAMENT_ARRAY[f.seq]::VARCHAR,
    :CATG_MEDICAMENT_ARRAY[f.seq]::VARCHAR,
    :MARQUE_FABRI_ARRAY[f.seq]::VARCHAR
  FROM TABLE(FLATTEN(:CD_MEDICAMENT_ARRAY)) f(seq, key, value)
  WHERE f.seq < :rows_count;

  RETURN :rows_count || ' MEDICAMENT(S) inséré(s)';
END;
$$;

